from aiogram.filters import Command
from aiogram.types import Message, BotCommandScopeChat
from aiogram.filters import StateFilter
from aiogram import Router, Bot
from routers.commands import user_commands, admin_commands
from utils.utils import make_reply, check_adress_exist, check_inn_exist, check_name_exist
from routers.states import EditForm
from db import Db
import html


admin_router = Router()


async def _ensure_admin(tg_id: int) -> bool:
    return (await Db.get_user_role(tg_id)) == "admin"


@admin_router.message(StateFilter(EditForm.analyze, EditForm.edit))
async def analyze_message(message: Message):
    await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞")


@admin_router.message(Command("promote"))
async def cmd_promote(message: Message, bot: Bot):
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    parts = message.text.split(maxsplit=2) if message.text else []
    if len(parts) < 2:
        await message.answer(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: /promote {html.escape("<telegram_id>")}")
        return
    try:
        target = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID")
        return
    await Db.set_user_role(target, "admin")
    try:
        await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=target))
    except:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    await message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞ –ø—Ä–∏—Å–≤–æ–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target}")


@admin_router.message(Command("grant"))
async def cmd_grant(message: Message, bot: Bot):
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    parts = message.text.split(maxsplit=2) if message.text else []
    if len(parts) < 2:
        await message.answer(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: /grant {html.escape("<telegram_id>")}")
        return
    try:
        target = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID")
        return
    await Db.set_user_role(target, "user")
    try:
        await bot.set_my_commands(user_commands, scope=BotCommandScopeChat(chat_id=target))
    except:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ—è. –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –µ–º—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
    await message.answer(f"‚úÖ –î–æ—Å—Ç—É–ø –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target}")


@admin_router.message(Command("ban"))
async def cmd_ban(message: Message, bot: Bot):
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    parts = message.text.split(maxsplit=2) if message.text else []
    if len(parts) < 2:
        await message.answer(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: /ban {html.escape("<telegram_id>")}")
        return
    try:
        target = int(parts[1])
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π Telegram ID")
        return
    await Db.set_user_role(target, "banned")
    try:
        await bot.set_my_commands(commands=[], scope=BotCommandScopeChat(chat_id=target))
    except:
        pass
    await message.answer(f"üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {target}")


@admin_router.message(Command("delete"))
async def cmd_ban(message: Message):
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    parts = message.text.split(maxsplit=1) if message.text else []
    if len(parts) < 2:
        await message.answer(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: /delete {html.escape("<id –æ–±—ä–µ–∫—Ç–∞>")}")
        return
    target = int(parts[1])
    flag = await Db.delete_object(target)
    if flag:
        await message.answer("–û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç –∏–∑ –±–∞–∑—ã")


@admin_router.message(Command("search"))
async def cmd_ban(message: Message):
    if not await _ensure_admin(message.from_user.id):
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞")
        return
    parts = message.text.split(maxsplit=1) if message.text else []
    if len(parts) < 2:
        await message.answer(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ: /search {html.escape("<search text>")}")
        return
    target = parts[1]
    for field in ["name", "inn_name_customer", "adress"]:
        if field == "name":
            flag, obj, _ = await check_name_exist(target)
        if field == "inn_name_customer":
            flag, obj, _ = await check_inn_exist(target)
        if field == "adress":
            flag, obj, _ = await check_adress_exist(target)
        if flag:
            break
    if flag:
        reply_text = make_reply(dict(obj))
        await message.answer(reply_text)
    else:
        await message.answer("–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
